% *************************************************************************
% Test 1
% *************************************************************************
% pmusic with no extra params
n = 0:199;
x = cos(0.257*pi*n) + sin(0.2*pi*n) + 0.01*randn(size(n));
[s,w,v,e] = pmusic(x,4);      % Set p to 4 because there are two real inputs

save('test1.mat','x','s','w','v','e');


% *************************************************************************
% Test 2
% *************************************************************************
% specifying fs and subspace dimension
% [] corresponds to ?
% fs=8k
% nwin = 7
[P2,f2,v2,e2] = pmusic(x, [Inf,1.1], [], 8000, 7);

save('test2.mat','x','P2','f2','v2','e2');


% *************************************************************************
% Test 3
% *************************************************************************
% correlation matrix as an input
R = toeplitz(cos(0.1*pi*(0:6))) + 0.1*eye(7);
[P3,f3] = pmusic(R,4,'corr');

save('test3.mat','R','P3','f3');

% *************************************************************************
% Test 4
% *************************************************************************
% entering signal data matrix
n = 0:699;
x = cos(0.257*pi*(n)) + 0.1*randn(size(n));
Xm = corrmtx(x,7,'mod');
[P4,f4] = pmusic(Xm,2);

save('test4.mat','Xm','P4','f4');


% *************************************************************************
% Test 5
% *************************************************************************
% using windowing to create effect of a single data matrix
n = 0:699;
x = cos(0.257*pi*(n)) + 0.1*randn(size(n));
[P5,f5] = pmusic(x,2,512,[],7,0);

save('test5.mat','x','P5','f5');
